def abmax(board, move, alpha, beta, maximize, depthleft):
    if depthleft == 0:
        score = evaluatemove(board, move)
        if maximize:
            score = -score
        return move, score
    pushed = False
    if move is not None:
        thismovescore = evaluatemove(board, move)
        board.push(move)
        pushed = True
    else:
        thismovescore = None

    if board.legal_moves.count() == 0:
        board.pop()
        if move is not None:
            if maximize:
                thismovescore = -thismovescore
            return move, thismovescore
        else:
            return ("", 0)

    if maximize:
        maxScore = -10000
        for move in board.legal_moves:
            score = abmax(board, move, alpha, beta, False, depthleft - 1, material)[1]
            if (thismovescore is not None):
                score -= thismovescore
            if score > maxScore:
                bestmove = move
            maxScore = max(score, maxScore)
            alpha = max(alpha, score)
            if alpha >= beta:
                break
        if pushed:
            board.pop()
        return (bestmove, maxScore)
    else:
        minScore = 10000
        for move in board.legal_moves:
            score = abmax(board, move, alpha, beta, True, depthleft - 1, material)[1]
            if (thismovescore is not None):
                score += thismovescore
            if score < minScore:
                worstMove = move
            minScore = min(score, minScore)
            beta = min(beta, score)
            if beta <= alpha:
                break
        if pushed:
            board.pop()
        return worstMove, minScore
